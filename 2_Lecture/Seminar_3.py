"""
# Задача_16: 
# Требуется вычислить, сколько раз встречается 
# некоторое число X в массиве A[1..N]. Пользователь в первой 
# строке вводит натуральное число N – количество элементов в 
# массиве. В последующих строках записаны N целых чисел Ai.
# Последняя строка содержит число X

# Ввод числа 5
# Список: 1 2 3 4 5
# 3 -> 1 - сколько раз число повторяется в списке

# РЕШЕНИЕ_ЗАДАЧИ_16

#Решение_1

lst = [1, 2, 3, 4, 5]
x = 3
count = 0
for i in lst: # проход по значениям (элементам из списка lst)
    if i == x:
        count += 1
print(count)

#Решение_2
count = 0
for i in range(len(list_1)):
    if list_1[i] == k:
        count += 1
print(count)

"""

"""
# Задача_17:

# Дан список чисел. Определите, сколько в нем
# встречается различных чисел.
# Input: [1, 1, 2, 0, -1, 3, 4, 4]
# Output: 6
# Примечание: Пользователь может вводить значения
# списка или список задан изначально.

# РЕШЕНИЕ_ЗАДАЧИ_17

#Решение_1
lst = [1, 1, 2, 0, -1, 3, 4, 4] # создан список
lst2 = [lst[0]]
for i in lst:
    if i in lst2: # добавление неповторяющихся элементов во 2-й список
    # if i not in lst2 - если нет, тогда дальше
       continue  # если есть элемент, тогда продолжаем
    else: lst2.append(i)
print(len(lst2))

#Решение_2
# nums = [1, 1, 2, 0, -1, 3, 4, 4]
# print(len(set(nums)))

"""


"""
# Задача_18:

# Требуется найти в массиве A[1..N] самый близкий по
# величине элемент к заданному числу X. Пользователь в первой 
# строке вводит натуральное число N – количество элементов в 
# массиве. В последующих строках записаны N целых чисел Ai.
# Последняя строка содержит число X

# 5
# 1 2 3 4 5
# 6
# -> 5

# РЕШЕНИЕ_ЗАДАЧИ_18

#Решение_1

# lst = [-4, 2, 3, -1, 5]
# k = -5
# minimum = abs(lst[0]-k) # сохраняется 1 элем списка, взяли значение по модулю, 
# closest_num = lst[0] # главная переменная с результатом, лучше приравнивать к lst[0], а не к 0
# for i in lst:
#     if abs(i - k) < minimum:
#         closest_num = i
#         minimum = abs(i - k)
# print(closest_num)

#Решение_2 - lambda

# closest_num = min(lst, key=lambda x: abs(x-k))
# print(closest_num)

#Решение_3 - NONE

lst = [7, 2, 3, 4, 5]
k = -6

closest = None
min_diff = None

for num in lst:
    if num > k:
        diff = num - k
    else:
        diff = k - num
    if min_diff is None or diff < min_diff: # Проверка не меньше ли разница минимальной разницы
        min_diff = diff
        closest = num
print(closest)

"""

"""
# Задача_19:

# Дана последовательность из N целых чисел и число
# K. Необходимо сдвинуть всю последовательность
# (сдвиг - циклический) на K элементов вправо, K –
# положительное число.
# Input: [1, 2, 3, 4, 5] k = 2
# Output: [4, 5, 1, 2, 3]
# Примечание: Пользователь может вводить значения
# списка или список задан изначально.

# РЕШЕНИЕ_ЗАДАЧИ_19

#Решение_1

n = [1, 2, 3, 4, 5]
k = 2

for i in range(k):
    bul = n.pop() # pop выдергивает последний элемент
    n.insert(0, bul) # insert(0,___) добавляет в начало списка и двигает вправо 
                     # append вставляет в конец списка
print(n)

#Решение_2

n = [1, 2, 3, 4, 5]
k = 2
m = n[len(n)-k:] + n[:len(n)-k] # список разделен 2 среза
print(m)                        # затем списки меняются местами

"""

"""
# Задача_20:

# В настольной игре Скрабл (Scrabble) каждая буква имеет
# определенную ценность. В случае с английским алфавитом
# очки распределяются так:
# ● A, E, I, O, U, L, N, S, T, R – 1 очко;
# ● D, G – 2 очка;
# ● B, C, M, P – 3 очка;
# ● F, H, V, W, Y – 4 очка;
# ● K – 5 очков;
# ● J, X – 8 очков;
# ● Q, Z – 10 очков.
# А русские буквы оцениваются так:
# ● А, В, Е, И, Н, О, Р, С, Т – 1 очко;
# ● Д, К, Л, М, П, У – 2 очка;
# ● Б, Г, Ё, Ь, Я – 3 очка;
# ● Й, Ы – 4 очка;
# ● Ж, З, Х, Ц, Ч – 5 очков;
# ● Ш, Э, Ю – 8 очков;
# ● Ф, Щ, Ъ – 10 очков.
# Напишите программу, которая вычисляет стоимость введенного
# пользователем слова. Будем считать, что на вход подается 
# только одно слово, которое содержит либо только
# английские, либо только русские буквы.

#input: ноутбук
#output: 12


# РЕШЕНИЕ_ЗАДАЧИ_20

#Решение_1

# k = 'ноутбук'

# # Создание соловаря, буквы заглавные
# points = {
# # Английские буквы
# 'A': 1, 'E': 1, 'I': 1, 'O': 1, 'U': 1, 'L': 1, 'N': 1, 'S': 1, 'T': 1, 'R': 1,
# 'D': 2, 'G': 2,
# 'B': 3, 'C': 3, 'M': 3, 'P': 3,
# 'F': 4, 'H': 4, 'V': 4, 'W': 4, 'Y': 4,
# 'K': 5,
# 'J': 8, 'X': 8,
# 'Q': 10, 'Z': 10,

# # Русские буквы
# 'А': 1, 'В': 1, 'Е': 1, 'И': 1, 'Н': 1, 'О': 1, 'Р': 1, 'С': 1, 'Т': 1,
# 'Д': 2, 'К': 2, 'Л': 2, 'М': 2, 'П': 2, 'У': 2,
# 'Б': 3, 'Г': 3, 'Ё': 3, 'Ь': 3, 'Я': 3,
# 'Й': 4, 'Ы': 4,
# 'Ж': 5, 'З': 5, 'Х': 5, 'Ц': 5, 'Ч': 5,
# 'Ш': 8, 'Э': 8,'Ю': 8,
# 'Ф': 10, 'Щ': 10,'Ъ': 10,
# }
# score = 0
# for letter in k: # k = может быть и заглавной и маленькой
#                  # прохождение по каждому ключу словаря
#     score += points[letter.upper()] 
# print(score)

#Решение_2

k = 'ноутбук'
dict_1 = {1:'AEIOULNSTRАВЕИНОРСТ', 2:'DGДКЛМПУ', 3:'BCMPБГЁЬЯ', 4:'FHVWYЙЫ', 5:'KЖЗХЦЧ', 8:'JXШЭЮ', 10:'QZФЩЪ'}
word = k.upper()
sum = 0
for i in word:                  # ищем букву в слове
    for x,y in dict_1.items():
        if i in y:              # если значение есть в слове
            sum += x            # к сумме прибавляется ключ
print(sum)

"""

"""

# Задача_21:
# Напишите программу для печати всех уникальных
# значений в словаре.
# Input: [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"},
# {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII
# ":" S007 "}]
# Output: {'S005', 'S002', 'S007', 'S001', 'S009'}
# Примечание: Список словарей задан изначально.
# Пользователь его не вводит

# РЕШЕНИЕ_ЗАДАЧИ_21

s = set()
d = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"},{"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII":" S007 "}]

# Решение_1
# for i in d:
#     for value in i.values():
#         s.add(value)

# Решение_2 - какие уникальные неповторяющиеся  значения есть
# for i in d:
#     for value in i:
#         s.add(value)

print(s)

"""


"""
# Задача_22:

# Выводятся ном ера телефонов в одну строку через пробел с разными
# кодами стран: +7, +6, +2, +4 и т.д. а значения - список номеров
# (следующих в том же порядке, что и во входной строке) с соответствующими
# кодами. Полученный словарь вывести командой:
# print(*sorted(d.items()))

#Sample Input
# +71234567890 +71234567854 +61234576890 +52134567890 +21235777890 +21234567110 +71232267890
# ('+2', ['+21235777890','+21234567110']) ('+5', ['+52134567890']) ('+6', ['+61234576890']) ('+7', ['+71234567890', '+71234567854', '+71232267890'])

inp = "+71234567890 +71234567854 +61234576890 +52134567890 +21235777890 +21234567110 +71232267890"
result = dict() # на вход строка и создается словарь

# РЕШЕНИЕ_ЗАДАЧИ_22

for number in inp.split(" "): # разделитель пробел, перебираем элементы
    code = number[:2]         # Выделяем код, первые 2 символа 
    if code not in result:    # проверка, входит ли номер код в ключи dict, если НЕТ
        result[code] = list() # тогда добавляем туда, либо добавляем пустой лист значение
        result[code].append(number) # далее по этому ключу добавляется номер
# result[code] = []
# result[code] += [] => оптимальная запись
print(result)

"""

"""

# Задача_23:

# Дан массив, состоящий из целых чисел. Напишите
# программу, которая подсчитает количество
# элементов массива, больших предыдущего (элемента
# с предыдущим номером)
# Input: [0, -1, 5, 2, 3]
# Output: 2 (-1 < 5, 2 < 3)
# Примечание: Пользователь может вводить значения
# списка или список задан изначально.

# РЕШЕНИЕ_ЗАДАЧИ_23

# Решение_1

# lst = [0, -1, 5, 2, 3]
# count = 0
# for i in range(1, len(lst)):# от 1-цы до конца списка, 
#     if lst[i] > lst[i-1]:   # если элемент в итерации больше предыдущего
#         count += 1          # тогда в счетчике добавляется 1
# print(count)

# Решение_2

# lst = [0, -1, 5, 2, 3]
# result = 0

# for i in range(1,len(lst)):
#     if lst[i-1] < lst[i]:
#         result += 1
#         print(f"{lst[i-1]} < {lst[i]}")
# print(result)

"""
