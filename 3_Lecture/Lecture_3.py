# def sum_numbers(n, y='Hello'):
#     print(y)
#     summa = 0
#     for i in range(1, n+1):
#         summa += i
#         return summa
#     print('Stop')


# a = sum_numbers(5)
# print(a)


# def sum_str(*args):
#     res = ''
#     for i in args:
#         res += i
#         return res


# print(sum_str('q', 'e', 'l'))

# –†–ï–ö–£–†–°–ò–Ø

# –†–µ–∫—É—Ä—Å–∏—è ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∞—è —Å–∞–º–∞ —Å–µ–±—è.


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ n.
# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ n - –ø–µ—Ä–≤—ã—Ö —á–ª–µ–Ω–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –§–∏–±–æ–Ω–∞—á—á–∏.
# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –§–∏–±–æ–Ω–∞—á—á–∏, —ç—Ç–æ —Ç–∞–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤
# –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥–æ–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ —Å—É–º–º—É 2-—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö
# üí° –ü—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–∏ –≤–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–¥–æ
# –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –≤—ã–∑—ã–≤–∞—Ç—å —Å–∞–º—É —Å–µ–±—è. –ü–æ-–¥—Ä—É–≥–æ–º—É –≥–æ–≤–æ—Ä—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
# —É–∫–∞–∑–∞—Ç—å –±–∞–∑–∏—Å —Ä–µ–∫—É—Ä—Å–∏–∏

# def fib(n):
#     if n in [1, 2]:
#         return 1
#     return fib(n - 1) + fib(n - 2)


# list_1 = []
# for i in range(1, 10):
#     list_1.append(fib(i))
# print(list_1)  # [1, 1, 2, 3, 5, 8, 13, 21, 34]

                                            # –ê–ª–≥–æ—Ä–∏—Ç–º—ã

# –ê–ª–≥–æ—Ä–∏—Ç–º–æ–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
# –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏. –í –ø—Ä–∏–Ω—Ü–∏–ø–µ, –ª—é–±–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ
# –∫–æ–¥–∞ –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º, –Ω–æ –º—ã —Å –í–∞–º–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º 2
# —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ–∫:
# ‚óè –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
# ‚óè –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º

# –ó–∞–¥–∞—á–∞:

# –î–≤–∞ –¥—Ä—É–≥–∞ —Ä–µ—à–∏–ª–∏ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É: –æ–¥–∏–Ω –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, –¥—Ä—É–≥–æ–π
# –¥–æ–ª–∂–µ–Ω –æ—Ç–≥–∞–¥–∞—Ç—å. –°–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å, —á—Ç–æ –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–π–Ω–æ–º
# –ø–æ—Ä—è–¥–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 32, 27, 60, 73‚Ä¶ –î–∞, –º—ã –º–æ–∂–µ–º —É–≥–∞–¥–∞—Ç—å –≤ –∫–∞–∫–æ–π-—Ç–æ –º–æ–º–µ–Ω—Ç, –Ω–æ —á—Ç–æ
# –µ—Å–ª–∏ –º—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Äú—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π‚Äù –û–±–æ–∑–Ω–∞—á–∏–º –¥—Ä—É–∑–µ–π, –¥—Ä—É–≥_1
# —ç—Ç–æ –ò–≤–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ, –¥—Ä—É–≥_2 —ç—Ç–æ –ü–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≥–∞–¥—ã–≤–∞–µ—Ç. 

# –ò—Ç–∞–∫ –Ω–∞—á–Ω–µ–º:
# –ò–≤–∞–Ω –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ 77.
# –ü–µ—Ç—Ä: –ß–∏—Å–ª–æ –±–æ–ª—å—à–µ 50? –ò–≤–∞–Ω: –î–∞.
# –ü–µ—Ç—Ä: –ß–∏—Å–ª–æ –±–æ–ª—å—à–µ 75? –ò–≤–∞–Ω: –î–∞.
# –ü–µ—Ç—Ä: –ß–∏—Å–ª–æ –±–æ–ª—å—à–µ 87? –ò–≤–∞–Ω: –ù–µ—Ç.
# –ü–µ—Ç—Ä: –ß–∏—Å–ª–æ –±–æ–ª—å—à–µ 81? –ò–≤–∞–Ω: –ù–µ—Ç.
# –ü–µ—Ç—Ä: –ß–∏—Å–ª–æ –±–æ–ª—å—à–µ 78? –ò–≤–∞–Ω: –ù–µ—Ç.
# –ü–µ—Ç—Ä: –ß–∏—Å–ª–æ –±–æ–ª—å—à–µ 76? –ò–≤–∞–Ω: –î–∞
# –ß–∏—Å–ª–æ –æ–∫–∞–∑–∞–ª–æ—Å—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 76 < x < 78, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —á–∏—Å–ª–æ 77. –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞. –ù–∞
# —Å–∞–º–æ–º –¥–µ–ª–µ –º—ã —Å–µ–π—á–∞—Å –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π
# —Ç–∞–∫–∂–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Äú—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π‚Äù. –î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫
# –æ–±—Å—É–∂–¥–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞ –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.


# ‚óè –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–æ–º –∑–Ω–∞—á–µ–Ω–∏–π

# def quick_sort(array):  # array - –º–∞—Å—Å–∏–≤
#     if len(array) < 1:  # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –º–µ–Ω—å—à–µ 1,
#         return array
#     else:
#         pivot = array[0] # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è pivot –∫—É–¥–∞ –º—ã —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–π –º–∞—Å—Å–∏–≤
#         less = [i for i in array[1:] if i <= pivot] #1-–π –º–∞—Å—Å–∏–≤ - —Ü–∏–∫–ª –ø–æ i, –±–µ—Ä—É—Ç—Å—è –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ <= –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π pivot
#         greater = [i for i in array[1:] if i > pivot]
#         return quick_sort(less) + [pivot] + quick_sort(greater)


# print(quick_sort([10, 5, 2, 3]))


# ‚óè –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º

# def merge_sort(nums):
#     if len(nums) > 1:
#         mid = len(nums) // 2
#         left = nums[:mid]
#         right = nums[mid:]
#         merge_sort(left)
#         merge_sort(right)
#         i = j = k = 0
#         while i < len(left) and j < len(right):
#             if left[i] < right[j]:
#                 nums[k] = left[i]
#                 i += 1
#             else:
#                 nums[k] = right[j]
#                 j += 1
#                 k += 1
#         while i < len(left):
#             nums[k] = left[i]
#             i += 1
#             k += 1
#         while j < len(right):
#             nums[k] = right[j]
#             j += 1
#             k += 1
#     nums = [38, 27, 43, 3, 9, 82, 10]
#     merge_sort(nums)
#     print(nums)
